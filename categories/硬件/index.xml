<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>硬件 on 斑竹坡-程序员</title>
    <link>https://dev960.github.io/categories/%E7%A1%AC%E4%BB%B6/</link>
    <description>Recent content in 硬件 on 斑竹坡-程序员</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Thu, 14 Sep 2023 21:37:56 +0800</lastBuildDate><atom:link href="https://dev960.github.io/categories/%E7%A1%AC%E4%BB%B6/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>瑞立德小屏幕调试</title>
      <link>https://dev960.github.io/post/%E7%91%9E%E7%AB%8B%E5%BE%B7%E5%B0%8F%E5%B1%8F%E5%B9%95%E8%B0%83%E8%AF%95/</link>
      <pubDate>Thu, 14 Sep 2023 21:37:56 +0800</pubDate>
      
      <guid>https://dev960.github.io/post/%E7%91%9E%E7%AB%8B%E5%BE%B7%E5%B0%8F%E5%B1%8F%E5%B9%95%E8%B0%83%E8%AF%95/</guid>
      <description>国产版本   lib(包含静态库和头文件)
  将test拷贝到Linux任意目录下
  执行 ls /dev |grep tty
  确定显示屏通信的COM端口
  测试 sudo /test /dev/ttyAMA1, 正常显示显示屏厂商名字和设备型号
  make 多线程
  sudo ./demo 网卡名参数
demo : main.o aarch64-linux-gnu-gcc -o demo main.o ./lib/libraylidlcd.a -pthread -lm #gcc -o demo main.o ./lib/libraylidlcd.a -pthread -lm main.o : main.c aarch64-linux-gnu-gcc -c main.c -pthread -lm #gcc -c main.c -pthread -lm .PHONY : clear clear: rm demo *.o   源码</description>
    </item>
    
    <item>
      <title>合宙Esp32&#43;Micropython温湿度传感器</title>
      <link>https://dev960.github.io/post/esp32&#43;micropython%E4%BC%A0%E6%84%9F%E5%99%A8/</link>
      <pubDate>Sun, 10 Sep 2023 01:37:56 +0800</pubDate>
      
      <guid>https://dev960.github.io/post/esp32&#43;micropython%E4%BC%A0%E6%84%9F%E5%99%A8/</guid>
      <description>价格：9.9包邮 温湿度传感器 💡 Tips：GND：接地，VCC:3.3v, DAT:pin4。
 支持温度，湿度。 支持定时刷新温湿度和时间。  OLED显示屏 💡 Tips：GND：接地， VCC:5v, SCL: pin5, SDA: pin4
 支持中英文。 支持定时刷新数据。  超声波HCSR04传感器 💡 Tips：GND:接地， VCC:5v, TRI: pin12, CHO: pin13。
 支持最大400mm  MAX10302心率血氧传感器 💡 Tips：GND:接地， VCC:5v, SCL:pin9, SDA:pin8
 支持血氧，心率，温度  # -*- coding: utf-8 -*- from machine import Pin,Timer,RTC from ssd1306_lib import SSD1306 import gc import math import font import dht11 import utime #import mqtt import utils import time from HCSR04 import HCSR04 from mqtt import mqttClient from wifi_manager import WifiManager hc = HCSR04(trigger_pin=12, echo_pin=13,echo_timeout_us=10000) print(&amp;#34;distance:&amp;#34;,hc.</description>
    </item>
    
  </channel>
</rss>

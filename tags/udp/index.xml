<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>udp on 斑竹坡-程序员</title>
    <link>https://dev960.github.io/tags/udp/</link>
    <description>Recent content in udp on 斑竹坡-程序员</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Wed, 13 Sep 2023 21:37:56 +0800</lastBuildDate><atom:link href="https://dev960.github.io/tags/udp/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>转linux 系统 UDP 丢包问题分析思路</title>
      <link>https://dev960.github.io/post/udp%E4%B8%A2%E5%8C%85%E6%8E%92%E6%9F%A5/</link>
      <pubDate>Wed, 13 Sep 2023 21:37:56 +0800</pubDate>
      
      <guid>https://dev960.github.io/post/udp%E4%B8%A2%E5%8C%85%E6%8E%92%E6%9F%A5/</guid>
      <description>linux 系统 UDP 丢包问题分析思路_ArthurKingYs的博客-CSDN博客
最近工作中遇到某个服务器应用程序 UDP 丢包，在排查过程中查阅了很多资料，总结出来这篇文章，供更多人参考。
在开始之前，我们先用一张图解释 linux 系统接收网络报文的过程。
 首先网络报文通过物理网线发送到网卡 网络驱动程序会把网络中的报文读出来放到 ring buffer 中，这个过程使用 DMA（Direct Memory Access），不需要 CPU 参与 内核从 ring buffer 中读取报文进行处理，执行 IP 和 TCP/UDP 层的逻辑，最后把报文放到应用程序的 socket buffer 中 应用程序从 socket buffer 中读取报文进行处理  在接收 UDP 报文的过程中，图中任何一个过程都可能会主动或者被动地把报文丢弃，因此丢包可能发生在网卡和驱动，也可能发生在系统和应用。
之所以没有分析发送数据流程，一是因为发送流程和接收类似，只是方向相反；另外发送流程报文丢失的概率比接收小，只有在应用程序发送的报文速率大于内核和网卡处理速率时才会发生。
本篇文章假定机器只有一个名字为 eth0 的 interface，如果有多个 interface 或者 interface 的名字不是 eth0，请按照实际情况进行分析。
NOTE：文中出现的 RX （receive） 表示接收报文， TX （transmit） 表示发送报文。
确认有 UDP 丢包发生 要查看网卡是否有丢包，可以使用 ethtool -S eth0 查看，在输出中查找 bad 或者 drop对应的字段是否有数据，在正常情况下，这些字段对应的数字应该都是 0。如果看到对应的数字在不断增长，就说明网卡有丢包。
另外一个查看网卡丢包数据的命令是 ifconfig ，它的输出中会有 RX (receive 接收报文)和 TX （transmit 发送报文）的统计数据：</description>
    </item>
    
  </channel>
</rss>
